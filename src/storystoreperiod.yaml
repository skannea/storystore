blueprint:
  name: Storystore periodic logger
  description: |-
    Automation for periodic sampling of entities stored as records in a dedicated Storystore entity's *story* attribute. 
    Requires *python_script.storystore*.

  domain: automation
  input:
    ents:
      name: Logged entities
      description: "Entities to be sampled and logged."
      selector:
        entity:
          multiple: true

    storageentity:
      name: Storage entity
      description: "Entity (input_text) to be used for log records."
      selector:
        entity:
          multiple: false
          domain: input_text

    period:
      name: Period
      description: "When to sample"
      default: 60
      selector:
        select:
          options:
            - label: Every minute
              value: /1
            - label: Every 2 minutes
              value: /2
            - label: Every 5 minutes
              value: /5
            - label: Every 10 minutes
              value: /10
            - label: Every 15 minutes
              value: /15
            - label: Every 20 minutes
              value: /20
            - label: Every 30 minutes
              value: /30

    maxsize:
      name: Storage size
      description: "Max number of records in log."
      default: 10
      selector:
        number:
          min: 4
          max: 100
          mode: box

    topic:
      name: Topic
      description: "Outgoing topic for logging"
      default: "toweb/storysave/logname"
      selector:
        text:

    tracename:
      name: Automation name
      description: "Name for trace and debug"
      default: "Storystore period logger"
      selector:
        text:

variables:
  storageentity: !input storageentity
  maxsize: !input maxsize
  period: !input period
  topic: !input topic
  tracename: !input tracename

trigger:
  - platform: time_pattern
    minutes: !input period
    id: sample

  - platform: homeassistant
    event: start
    id: start

action:
  - choose:
      - conditions:
          - condition: trigger
            id: sample
        sequence:
          - service: python_script.storystore
            data:
              useentity: !input storageentity
              max: !input maxsize
              logstate: !input ents

          - service: mqtt.publish
            data:
              topic: !input topic
              retain: true
              payload_template: |-
                { 
                   "ent":   "{{storageentity}}", 
                   "trig":  "periodic minutes={{period}} ", 
                   "state": "{{tracename}}, max={{maxsize}}, topic={{topic}}", 
                   "log":   "{{ state_attr( storageentity, 'story' ) }}" 
                }
      - conditions:
          - condition: trigger
            id: start
        sequence:
          - wait_for_trigger:
              - platform: mqtt
                topic: !input topic
            timeout:
              hours: 0
              minutes: 0
              seconds: 10
              milliseconds: 0
          - service: python_script.storystore
            data:
              useentity: !input storageentity
              restore: "{{ wait.trigger.payload_json.log }}"

mode: single
